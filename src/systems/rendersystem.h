#pragma once
#include "gamesystem.h"
#include "SDL_image.h"
#include "../componentmanager.h"
#include "../components/components.h"
#include "../util/fileloader.h"
#include "../util/tilemap.h"
#include "../uimanager.h"
/**
 * @brief Render System to render objects and tilemaps in game world.
*/
class RenderSystem : public GameSystem {
public:
	/**
	 * @brief Constructor for RenderSystem objects.
	 * @param frameDelay - Delay between frames.
	 * @param spriteManager - Sprite manager for sprite objects.
	 * @param positionManager  - Position manager for position objects.
	 * @param renderer - SDL_Renderer for the actual rendering of the sprites in the gameworld.
	 * @param cameraFollow - Camera follow for rendering of 2d camera. 
	 * @param animatorManager - Animator manager to animate the sprites with an animator component.
	 * @param uiManager - UIManager to be able to render the ui elements.
	*/
	RenderSystem(int frameDelay, ComponentManager<Sprite>* spriteManager, ComponentManager<Position>* positionManager, SDL_Renderer* renderer,ComponentManager<Animator>* animatorManager, UIManager* uiManager,
		ComponentManager<Collider>* colliderManager);
	/**
	 * @brief Render system update loop.
	*/
	virtual void update();

	/**
	 * @brief Sets the current tilemap to display.
	 * @param tilesetPath - Path to tileset image used by tilemap.
	 * @param tilemapPath - Path to tilemap json file generated by tiled.
	 * @param layerCount - Count of layers in tilemap.
	 * @return Pointer to created tilemap.
	*/
	Tilemap* setMap(const char* tilesetPath, const char* tilemapPath, size_t layerCount);

	/**
	 * @brief Initializes the camera with certain viewport.
	 * @param viewWidth - Width of viewport.
	 * @param viewHeight - Height of viewport.
	*/
	void initCamera(int viewWidth, int viewHeight);

	/**
	 * @brief Gets the camera x position.
	 * @return Camera x position.
	*/
	int getCameraX() { return camera.x; }

	/**
	 * @brief Gets the camera y position.
	 * @return Camera y position.
	*/
	int getCameraY() { return camera.y; }

	/**
	 * @brief Sets the current camera follow target component.
	 * @param cameraFollow - Current camera follow target component.
	*/
	void setCameraFollowTarget(CameraFollow* cameraFollow) {
		this->cameraFollow = cameraFollow;
	}

	/**
	 * @brief Gets current tileset of tilemap.
	 * @return Current tileset.
	*/
	Tileset* getTileset() {
		return this->tileset;
	}

	/**
	 * @brief Gets the total tilemap width.
	 * @return Total tilemap width.
	*/
	int getTotalTilemapWidth() {
		return this->tilemap->getTotalTilemapWidth();
	}

	/**
	 * @brief Gets the total tilemap height.
	 * @return Total tilemap height.
	*/
	int getTotalTilemapHeight() {
		return this->tilemap->getTotalTilemapHeight();
	}
private:
	/**
	 * @brief Pointer to the sprite manager.
	*/
	ComponentManager<Sprite>* spriteManager = nullptr;
	/**
	 * @brief Pointer to the position manager.
	*/
	ComponentManager<Position>* positionManager = nullptr;

	/**
	 * @brief Pointer to the camera follow component.
	*/
	CameraFollow* cameraFollow = nullptr;

	/**
	 * @brief Pointer to the animator manager needed for animations.
	*/
	ComponentManager<Animator>* animatorManager = nullptr;

	/**
	 * @brief Pointer to the collider manager needed for debugging.
	*/
	ComponentManager<Collider>* colliderManager = nullptr;

	/**
	 * @brief Pointer to the ui manager to be able to render the ui elements.
	*/
	UIManager* uiManager = nullptr;

	/**
	 * @brief Reference to the SDL_Renderer.
	*/
	SDL_Renderer* renderer = nullptr;

	/**
	 * @brief Position array of the sprites sorted by y value minus half of the displayed sprite height (ascending).
	*/
	Position sortedSpritePositions[1024];

	/**
	 * @brief Position array for merge sort.
	*/
	Position sortArr[1024];

	/**
	 * @brief Reference to the current tilemap.
	*/
	Tilemap* tilemap = nullptr;
	
	/**
	 * @brief Reference to the current tileset used by the tilemap.
	*/
	Tileset* tileset = nullptr;

	/**
	 * @brief View area rectangle of the camera.
	*/
	SDL_Rect camera = { 0,0,0,0 };

	/**
	 * @brief Delay between frames.
	*/
	int frameDelay = 1000 / 60;

	/**
	 * @brief Renders all the ui elements in the window.
	*/
	void renderUI();

	/**
	 * @brief Renders all the labels of the ui.
	*/
	void renderLabels();

	/**
	 * @brief Renders all the panels of the ui.
	*/
	void renderPanels();

	/**
	 * @brief Renders all the progress bars of the ui.
	*/
	void renderProgressBars();

	/**
	 * @brief Renders all the buttons of the ui.
	*/
	void renderButtons();

	/**
	 * @brief Renders all current sprites in the window.
	*/
	void renderSprites();

	/**
	 * @brief Sorts the sprite before rendering. Needed for to be able to display depth in 2d environment.
	*/
	void sortSprites();

	/**
	 * @brief Animates the sprite.
	 * @param  Sprite to animate.
	*/
	void animateSprite(Sprite* sprite, Animator* animator);

	/**
	 * @brief Draw the given sprite in the gameworld.
	 * @param sprite - sprite to draw
	*/
	void draw(Sprite* sprite);

	/**
	 * @brief Renders the tilemap.
	*/
	void renderTilemap();

	/**
	 * @brief Sets the source rectangle of the tileset to display the right part of the tileset.
	 * @param tilemapData - What tile to display based on the tilemap.
	 * @param tileWidth - Width of the tiles.
	 * @param tileHeight - Height of the tiles.
	*/
	void setTilesetSrcRectPosition(unsigned int tilemapData, unsigned int tileWidth, unsigned int tileHeight);

	/**
	 * @brief Sets the destination rectangle of the tileset to display the tiles in the right area.
	 * @param currentX - Current X position on the tilemap.
	 * @param currentY - Current Y position on the tilemap.
	 * @param tileWidth - Width of the tiles.
	 * @param tileHeight - Height of the tiles.
	*/
	void setTilesetDestRectPosition(unsigned int currentX, unsigned int currentY, unsigned int tileWidth, unsigned int tileHeight);

	/**
	 * @brief Render the textures of the renderer.
	*/
	void render();

	/**
	 * @brief Moves the camera to the entity with the follow camera component.
	*/
	void moveCamera();

	/**
	 * @brief Sorts and merges the two parts of the position array together.
	 * @param arr - array to sort and merge the two parts of.
	 * @param start - Startindex of left side.
	 * @param middle - Middleindex between left and right side.
	 * @param end - Endindex of right side.
	*/
	void merge(Position* arr, size_t start, size_t middle, size_t end);

	/**
	 * @brief Merge sort implementation to sort an positions array.
	 * @param arr - Positions array to sort.
	 * @param start - Startindex of array.
	 * @param end - Endindex of array.
	*/
	void mergeSort(Position* arr, size_t start, size_t end);

	/**
	 * @brief Debug function that visualizes the position.
	*/
	void debugPosition();

	/**
	 * @brief Debug function that visualizes the colliders.
	*/
	void debugColliders();
};